Starting: C:\Program Files\go\bin\dlv-dap.exe dap --check-go-version=false --listen=127.0.0.1:53333 from c:\Users\mark_\Data\Google\Interview Prep\Golang\learngo\08-numbers-and-strings\01-numbers\01-arithmetic-operators\03-float-inaccuracy\01
DAP server listening at: 127.0.0.1:53333
1.199999999999999955591079014993738383054733276367187500000000
Process 4940 has exited with status 0
dlv dap (7344) exited with code: 0


https://go.dev/play/p/YzL5e_I3zon
package main

import "fmt"

func main() {
	ratio := 1.0 / 10.0
	fmt.Printf("%f", ratio*10)
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	ratio += 1.0 / 10.0
	fmt.Printf("\n%f\n", ratio)
}

Interesting result but not surprising I think:
1.000000
1.100000

Deeper analysis...

https://go.dev/play/p/0IFaHjtsz2g
package main

import "fmt"

func main() {
	ratio := 1.0 / 10.0
	fmt.Printf("\n%0.20f\n", ratio)
	fmt.Printf("%f", ratio*10)
	fmt.Printf("\n%0.20f\n", ratio)
	ratio = 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio*10)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%0.20f\n", ratio)
	ratio += 1.0 / 10.0
	fmt.Printf("%f\n", ratio)
	fmt.Printf("%0.20f\n", ratio)
}


0.10000000000000000555
1.000000
0.10000000000000000555
1.00000000000000000000
0.20000000000000001110
0.30000000000000004441
0.40000000000000002220
0.50000000000000000000
0.59999999999999997780
0.69999999999999995559
0.79999999999999993339
0.89999999999999991118
0.99999999999999988898
1.100000
1.09999999999999986677

Program exited.